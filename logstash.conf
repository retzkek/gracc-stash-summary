input {
    rabbitmq {
        host => "${AMQP_HOST:localhost}"
        port => "${AMQP_PORT:5672}"
        ssl => "${AMQP_SSL:false}"
        vhost => "${AMQP_VHOST:/}"
        user => "${AMQP_USER:guest}"
        password => "${AMQP_PASSWORD:guest}"

        exchange => "gracc.${GRACC_STREAM}.summary"
        exchange_type => "fanout"
        queue => "${GRACC_INSTANCE}.${GRACC_STREAM}.summary"
        key => "${GRACC_INSTANCE}"
        durable => true

        codec => "json"
        type => "JobUsageRecordSummary"
    }
}
filter {
    # use StartTime as logstash timestamp for transfers
    if [StartTime] {
        mutate {
            rename => { "@timestamp" => "@received" }
        }
        date {
            match => [ 'StartTime', 'ISO8601' ]
        }
    }
    # Calculate fingerprint
    #  - Sort unqiue summary fields
    #  - Generate JSON
    #  - Calculate MD5
    ruby {
        code => "
            require 'openssl'
            require 'json'
            incl_keys = ['StartTime', 'RawVOName', 'RawProjectName', 'ProbeName', 'CommonName',
                         'Resource_Protocol', 'Status', 'Resource_IsNew', 'Network_storageUnit', 'Grid', 'DN']
            rec_to_hash = event.to_hash.select {|k,v| incl_keys.include?(k)}
            rec_str = Hash[rec_to_hash.sort].to_json
            #event['checksum_str'] = rec_str
            event['checksum'] = OpenSSL::Digest.hexdigest('md5',rec_str)
        "
    }
}
output {
    #stdout {codec => "rubydebug"}
    elasticsearch {
        hosts => [ "${ELASTICSEARCH_HOST:localhost}" ]
        index => "gracc.${GRACC_STREAM}.summary3-%{+YYYY}"
        document_id => "%{checksum}"
        template_name => "gracc.summary3"
        template => "/etc/gracc-stash/gracc-summary-template.json"
        manage_template => true
        template_overwrite => true
    }
}
